// MONGO
const mongoose = require('mongoose')
const mongoURI = process.env['MONGODB']
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('Connected to MongoDB')
}).catch((error) => {
  console.error('Error connecting to MongoDB:', error)
})
const mongo = require('./mongofunctions')
// EXPRESS
const jwt = require('jsonwebtoken')
const secret = 'SECRET GENERATED BY NODE'
const verifyToken = (token) => {
  try {
    // JWT is self contained, it means we don't need to store the token anywhere in the server or database. whenever we give it to JWT, it can verify it
    const decoded = jwt.verify(token, secret)
    return decoded
  } catch (error) {
    throw new Error('Invalid Token')
  }
}
const extractUser = (decodedToken) => {
  if (decodedToken && decodedToken.username) {
    return decodedToken.username
  } else {
    throw new Error('Invalid or missing user ID in token')
  }
}
const express = require('express')
const app = express()
app.use(express.json())
// Token checking is not going to DB
const authChecker = (req, res, next) => {
  const token = req.headers.authorization
  try {
    const decoded = verifyToken(token)
    const extractedUser = extractUser(decoded)
    req.user = extractedUser
    next()
  } catch (error) {
    res.json({ error: 'auth is not there' + error })
  }
}
app.get('/', async (req, res) => {
  res.send('Welcome to AUTH')
})
app.post('/login', async (req, res) => {
  const userFromAPI = req.body
  if (Object.keys(userFromAPI).length !== 0) {
    try {
      const loginUserToken = await mongo.login(userFromAPI)
      res.status(400).json(loginUserToken)
    } catch (error) {
      res.status(400).json({error : `${error}`})
    }
  } else {
    return res.status(400).json({ error: 'Missing Body' })
  }

})
app.post('/signup', async (req, res) => {
  const userFromAPI = req.body
  if (Object.keys(userFromAPI).length !== 0) {
    try {
      const addedUser = await mongo.signup(userFromAPI)
      res.status(201).json(addedUser)
    } catch (error) {
      res.status(400).json({error : `${error}`})
    }
  } else {
    return res.status(400).json({ error: 'Body is missing' })
  }
})
app.post('/user/:userName/password', authChecker, async (req, res) => {
  const userObjectFromAPI = req.body
  if (Object.keys(userObjectFromAPI).length !== 0) {
    const changedPasswordToken = await mongo.changePassword(userObjectFromAPI)
    res.status(201).json({message : changedPasswordToken})
  } else {
    return res.status(400).json({ error: 'Missing Body' })
  }
})
app.post('/user/:userName/profile', authChecker, async (req, res) => {
  const userObjectFromAPI = req.body
  if (Object.keys(userObjectFromAPI).length !== 0) {
    const profileUpdateMessage = await mongo.updateProfilePicture(userObjectFromAPI)
    return res.status(201).json({message : profileUpdateMessage})
  } else {
    return res.status(400).json({ error: 'Missing Body' })
  }
})
app.post('/update-contact/:userName', authChecker, async(req, res) => {
  const userObjectFromAPI = req.body
  if (Object.keys(userObjectFromAPI).length !== 0) {
    const profileUpdateMessage = await mongo.updateContactDetails(userObjectFromAPI)
    return res.status(201).json({message : profileUpdateMessage})
  } else {
    return res.status(400).json({ error: 'Missing Body' })
  }
})
app.get('/users/phone/:phoneNumber', async(req, res) => {
  const phoneNumberFromAPI = req.params.phoneNumber
  try {
    const foundUser = await mongo.findUserByPhoneNumber(phoneNumberFromAPI)
    return res.status(201).json({message : foundUser.username})
  } catch (error) {
    return res.status(400).json({error : `${error}`})
  }
})
app.listen(3000, () => {
  console.log('Server is listening')
})